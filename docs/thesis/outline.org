#+STARTUP: showall
#+EXPORT_EXCLUDE_TAGS: noexport

* [[file:thesis.pdf][Thesis PDF file]]                                                :noexport:

* Introduction
** Why erasibility?
** Why homotopy type theory?
** Contributions
*** Introduction to homotopy type theory
An introduction to the basics of homotopy type theory geared towards
computer scientists, since all current introductions are written in
mind with the mathematician without any knowledge of type
theory. Instead, we want to introduce the subject to the computer
scientist who has some experience programming in dependently typed
languages such as Agda or Coq. 

*** Identify how HoTT can be interesting for programming

*** Comparison of collapsibility and hProp
A comparison of Brady's concept of collapsible type families and the
definition of hProp from homotopy type theory. We will see which of
the optimisation techniques can be applied if we replace collapsible
with hProp.

*** Comparison of hProp and Coq's Prop universe
In Coq, Prop serves several purposes. One of these is erasibility with
respect to extraction: all the terms that live in Prop are erased
during extraction.


* Introduction to homotopy type theory

** Intensional versus extensional
Explain the difference and how HoTT fits in this picture. Also note
that function extensionality is somewhat orthogonal to this
discussion.

** Source material                                                :noexport:
*** http://mathoverflow.net/questions/103815/intensional-equaity-in-type-theory
*** http://en.wikipedia.org/wiki/Intuitionistic_type_theory#Extensional_versus_intensional
*** http://ncatlab.org/nlab/show/extensional+type+theory

** h-levels
*** Motivate why we want to look at h-levels.

*** Definition of |Contractible : A -> Set|

Explain how the unit type is contractible, but the empty type is
not. Also explain the homotopic intuition and explain that this is
definition, according to that interpretation, is really different from
saying that a type has exactly one inhabitant. For example: the disc
is homotopically equivalent to a one-point space, yet the disc clearly
has more inhabitants.

**** TODO Prove that unit type is contractible
**** TODO Prove that empty type is not contractible
**** TODO Prove that the interval is contractible
**** TODO Note that one has to be careful with "geometric" intuition
Having a center for which there is a path from every other point in
the space is not entirely correct: S1 satisfies that property, but is
not contractible. The key here is having to satisfy that property in
some continuous way. It may also be nice to show other equivalent
notions of contractibility to make this clearer.

*** Inductive definition of h-levels

#+begin_src haskell
  h-level A 0 = Contractible A
  h-level A (n + 1) = forall x, y : A, h-level (Id A x y) n
#+end_src

**** TODO Explain filtration property
**** TODO Note that the h-level needn't be finite.

*** h-propositions

Types of h-level 1 are also called hProp, short for
h-proposition. Types in hProp are either empty or contractible, so
they are homotopically equivalent to either the bottom or unit
type. (Note that one has to be careful with this sentence when one
tries to formally prove this.) This is also where the name
"proposition" comes from: bottom and unit are the homotopy type
theoretic counterparts of the truth values false and true in classical
logic, i.e. it can be seen as the intuistionistic brother of the boolean
algebra $\{0,1\}$. 

**** TODO Show how unit is an hProp and empty as well.
As corollary of filtration and contractibility.

*** h-sets

Another important class of types, are the hSets: the types of
h-level 2. These correspond to discrete groupoids: the only arrows are
the identity arrows. This means that the only equalities there are,
are the reflexivity proofs. In other words, hSets satisfy the
uniqueness of identity proofs property and therefore also axiom K,
which means we can properly pattern match on them. Indeed, if we work
in Agda (without the --without-k flag), these are the only types we
can construct.

**** TODO Show how booleans are in hSet.

*** Higher inductive types

**** TODO Explain that these are really new.

**** TODO Example: universe of types with isomorphism as equality
booleans are isomorphic to itself in several ways.

**** TODO Prove that interval implies function extensionality.

* hProp and proof irrelevance

Show that things in hProp can be relevant in a more subtle sense. We
can write two "different" isomorphisms |T -> I| that are equivalent
propositionally, but definitionally not the same. This can influence
computations. Of course, the results will always be propositionally
equal.

* Collapsibility

We call a type family |D : (A : Set) -> Set| collapsible if it
satisfies the following property:

if we have two inhabitants |x, y : D ss| for some index |ss : A|,
then |x| and |y| are convertible.

** Collapsibility versus hProp

At first glance, we notice that the definition looks a lot like the
definition of hProp, where the internal equality (the identity types)
is replaced by convertibility, which is a relation external to the
system: we cannot prove anything about the convertibility relation
inside the system.

Another important, but more subtle, difference is that we have an
additional condition under which the equality (convertibility in this
case) must hold, namely it must hold in the empty context. 

*** TODO Explain where this condition comes from
Something to do with it being a run-time optimisation and evaluation
being done in the empty context in that case.

* Coq's Prop universe

This is somewhat interesting, because the extraction mechanism is
concerned with erasing parts of the program. However, one part of the
extraction mechanism that is less interesting to us, are the typing
problems one has in the target languages (e.g. Haskell). Since we take
Brady's approach, we are not interested in that kind of extraction.
